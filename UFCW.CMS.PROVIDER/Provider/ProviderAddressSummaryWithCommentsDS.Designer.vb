'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3082
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ProviderAddressSummaryWithComments"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ProviderAddressSummaryWithComments
    Inherits Global.System.Data.DataSet
    
    Private tableProviderAddressSummaryWithComments As ProviderAddressSummaryWithCommentsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ProviderAddressSummaryWithComments")) Is Nothing) Then
                MyBase.Tables.Add(New ProviderAddressSummaryWithCommentsDataTable(ds.Tables("ProviderAddressSummaryWithComments")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProviderAddressSummaryWithComments() As ProviderAddressSummaryWithCommentsDataTable
        Get
            Return Me.tableProviderAddressSummaryWithComments
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ProviderAddressSummaryWithComments = CType(MyBase.Clone,ProviderAddressSummaryWithComments)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ProviderAddressSummaryWithComments")) Is Nothing) Then
                MyBase.Tables.Add(New ProviderAddressSummaryWithCommentsDataTable(ds.Tables("ProviderAddressSummaryWithComments")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableProviderAddressSummaryWithComments = CType(MyBase.Tables("ProviderAddressSummaryWithComments"),ProviderAddressSummaryWithCommentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProviderAddressSummaryWithComments) Is Nothing) Then
                Me.tableProviderAddressSummaryWithComments.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ProviderAddressSummaryWithComments"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ProviderAddressSummaryWithComments.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableProviderAddressSummaryWithComments = New ProviderAddressSummaryWithCommentsDataTable
        MyBase.Tables.Add(Me.tableProviderAddressSummaryWithComments)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProviderAddressSummaryWithComments() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ProviderAddressSummaryWithComments = New ProviderAddressSummaryWithComments
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ProviderAddressSummaryWithCommentsRowChangeEventHandler(ByVal sender As Object, ByVal e As ProviderAddressSummaryWithCommentsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProviderAddressSummaryWithCommentsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROVIDER_ID As Global.System.Data.DataColumn
        
        Private columnTAXID As Global.System.Data.DataColumn
        
        Private columnTAXID_TYPE As Global.System.Data.DataColumn
        
        Private columnNAME1 As Global.System.Data.DataColumn
        
        Private columnNAME2 As Global.System.Data.DataColumn
        
        Private columnProviderSuspended As Global.System.Data.DataColumn
        
        Private columnPPOC_ELIGIBLE_SW As Global.System.Data.DataColumn
        
        Private columnPARENT_ID As Global.System.Data.DataColumn
        
        Private columnNPI As Global.System.Data.DataColumn
        
        Private columnCOMMENT_ID As Global.System.Data.DataColumn
        
        Private columnProviderUserID As Global.System.Data.DataColumn
        
        Private columnProviderTimestamp As Global.System.Data.DataColumn
        
        Private columnADDRESS_LINE1 As Global.System.Data.DataColumn
        
        Private columnADDRESS_LINE2 As Global.System.Data.DataColumn
        
        Private columnCITY As Global.System.Data.DataColumn
        
        Private columnCOUNTRY As Global.System.Data.DataColumn
        
        Private columnSTATE As Global.System.Data.DataColumn
        
        Private columnZIP As Global.System.Data.DataColumn
        
        Private columnZIP_4 As Global.System.Data.DataColumn
        
        Private columnPHONE1 As Global.System.Data.DataColumn
        
        Private columnEMAIL1 As Global.System.Data.DataColumn
        
        Private columnEXTENSION1 As Global.System.Data.DataColumn
        
        Private columnCONTACT1 As Global.System.Data.DataColumn
        
        Private columnEMAIL2 As Global.System.Data.DataColumn
        
        Private columnPHONE2 As Global.System.Data.DataColumn
        
        Private columnEXTENSION2 As Global.System.Data.DataColumn
        
        Private columnCONTACT2 As Global.System.Data.DataColumn
        
        Private columnAddressSuspended As Global.System.Data.DataColumn
        
        Private columnADDRESS_TYPE As Global.System.Data.DataColumn
        
        Private columnAddressType As Global.System.Data.DataColumn
        
        Private columnAddressUserID As Global.System.Data.DataColumn
        
        Private columnAddressTimestamp As Global.System.Data.DataColumn
        
        Private columnALERT As Global.System.Data.DataColumn
        
        Private columnAlertDescription As Global.System.Data.DataColumn
        
        Private columnCOMMENT_TEXT As Global.System.Data.DataColumn
        
        Private columnCommentCreatedBy As Global.System.Data.DataColumn
        
        Private columnCommentTimestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProviderAddressSummaryWithComments"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROVIDER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROVIDER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXID_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXID_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAME1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAME2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProviderSuspendedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProviderSuspended
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PPOC_ELIGIBLE_SWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPOC_ELIGIBLE_SW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PARENT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARENT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NPIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNPI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProviderUserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProviderUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProviderTimestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProviderTimestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDRESS_LINE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDRESS_LINE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDRESS_LINE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDRESS_LINE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COUNTRYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNTRY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZIP_4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnZIP_4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHONE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHONE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMAIL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXTENSION1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTENSION1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CONTACT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTACT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMAIL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHONE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHONE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXTENSION2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTENSION2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CONTACT2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTACT2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressSuspendedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressSuspended
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDRESS_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDRESS_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressUserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressTimestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressTimestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALERTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALERT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AlertDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlertDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENT_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentCreatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommentCreatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentTimestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommentTimestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProviderAddressSummaryWithCommentsRow
            Get
                Return CType(Me.Rows(index),ProviderAddressSummaryWithCommentsRow)
            End Get
        End Property
        
        Public Event ProviderAddressSummaryWithCommentsRowChanging As ProviderAddressSummaryWithCommentsRowChangeEventHandler
        
        Public Event ProviderAddressSummaryWithCommentsRowChanged As ProviderAddressSummaryWithCommentsRowChangeEventHandler
        
        Public Event ProviderAddressSummaryWithCommentsRowDeleting As ProviderAddressSummaryWithCommentsRowChangeEventHandler
        
        Public Event ProviderAddressSummaryWithCommentsRowDeleted As ProviderAddressSummaryWithCommentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProviderAddressSummaryWithCommentsRow(ByVal row As ProviderAddressSummaryWithCommentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProviderAddressSummaryWithCommentsRow( _
                    ByVal PROVIDER_ID As Integer,  _
                    ByVal TAXID As Integer,  _
                    ByVal TAXID_TYPE As String,  _
                    ByVal NAME1 As String,  _
                    ByVal NAME2 As String,  _
                    ByVal ProviderSuspended As Boolean,  _
                    ByVal PPOC_ELIGIBLE_SW As Boolean,  _
                    ByVal PARENT_ID As Integer,  _
                    ByVal NPI As Decimal,  _
                    ByVal COMMENT_ID As Integer,  _
                    ByVal ProviderUserID As String,  _
                    ByVal ProviderTimestamp As Date,  _
                    ByVal ADDRESS_LINE1 As String,  _
                    ByVal ADDRESS_LINE2 As String,  _
                    ByVal CITY As String,  _
                    ByVal COUNTRY As String,  _
                    ByVal STATE As String,  _
                    ByVal ZIP As Decimal,  _
                    ByVal ZIP_4 As Decimal,  _
                    ByVal PHONE1 As Decimal,  _
                    ByVal EMAIL1 As String,  _
                    ByVal EXTENSION1 As Integer,  _
                    ByVal CONTACT1 As String,  _
                    ByVal EMAIL2 As String,  _
                    ByVal PHONE2 As Decimal,  _
                    ByVal EXTENSION2 As Integer,  _
                    ByVal CONTACT2 As String,  _
                    ByVal AddressSuspended As Boolean,  _
                    ByVal ADDRESS_TYPE As Integer,  _
                    ByVal AddressType As String,  _
                    ByVal AddressUserID As String,  _
                    ByVal AddressTimestamp As Date,  _
                    ByVal ALERT As String,  _
                    ByVal AlertDescription As String,  _
                    ByVal COMMENT_TEXT As String,  _
                    ByVal CommentCreatedBy As String,  _
                    ByVal CommentTimestamp As Date) As ProviderAddressSummaryWithCommentsRow
            Dim rowProviderAddressSummaryWithCommentsRow As ProviderAddressSummaryWithCommentsRow = CType(Me.NewRow,ProviderAddressSummaryWithCommentsRow)
            Dim columnValuesArray() As Object = New Object() {PROVIDER_ID, TAXID, TAXID_TYPE, NAME1, NAME2, ProviderSuspended, PPOC_ELIGIBLE_SW, PARENT_ID, NPI, COMMENT_ID, ProviderUserID, ProviderTimestamp, ADDRESS_LINE1, ADDRESS_LINE2, CITY, COUNTRY, STATE, ZIP, ZIP_4, PHONE1, EMAIL1, EXTENSION1, CONTACT1, EMAIL2, PHONE2, EXTENSION2, CONTACT2, AddressSuspended, ADDRESS_TYPE, AddressType, AddressUserID, AddressTimestamp, ALERT, AlertDescription, COMMENT_TEXT, CommentCreatedBy, CommentTimestamp}
            rowProviderAddressSummaryWithCommentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProviderAddressSummaryWithCommentsRow)
            Return rowProviderAddressSummaryWithCommentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProviderAddressSummaryWithCommentsDataTable = CType(MyBase.Clone,ProviderAddressSummaryWithCommentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProviderAddressSummaryWithCommentsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPROVIDER_ID = MyBase.Columns("PROVIDER_ID")
            Me.columnTAXID = MyBase.Columns("TAXID")
            Me.columnTAXID_TYPE = MyBase.Columns("TAXID_TYPE")
            Me.columnNAME1 = MyBase.Columns("NAME1")
            Me.columnNAME2 = MyBase.Columns("NAME2")
            Me.columnProviderSuspended = MyBase.Columns("ProviderSuspended")
            Me.columnPPOC_ELIGIBLE_SW = MyBase.Columns("PPOC_ELIGIBLE_SW")
            Me.columnPARENT_ID = MyBase.Columns("PARENT_ID")
            Me.columnNPI = MyBase.Columns("NPI")
            Me.columnCOMMENT_ID = MyBase.Columns("COMMENT_ID")
            Me.columnProviderUserID = MyBase.Columns("ProviderUserID")
            Me.columnProviderTimestamp = MyBase.Columns("ProviderTimestamp")
            Me.columnADDRESS_LINE1 = MyBase.Columns("ADDRESS_LINE1")
            Me.columnADDRESS_LINE2 = MyBase.Columns("ADDRESS_LINE2")
            Me.columnCITY = MyBase.Columns("CITY")
            Me.columnCOUNTRY = MyBase.Columns("COUNTRY")
            Me.columnSTATE = MyBase.Columns("STATE")
            Me.columnZIP = MyBase.Columns("ZIP")
            Me.columnZIP_4 = MyBase.Columns("ZIP_4")
            Me.columnPHONE1 = MyBase.Columns("PHONE1")
            Me.columnEMAIL1 = MyBase.Columns("EMAIL1")
            Me.columnEXTENSION1 = MyBase.Columns("EXTENSION1")
            Me.columnCONTACT1 = MyBase.Columns("CONTACT1")
            Me.columnEMAIL2 = MyBase.Columns("EMAIL2")
            Me.columnPHONE2 = MyBase.Columns("PHONE2")
            Me.columnEXTENSION2 = MyBase.Columns("EXTENSION2")
            Me.columnCONTACT2 = MyBase.Columns("CONTACT2")
            Me.columnAddressSuspended = MyBase.Columns("AddressSuspended")
            Me.columnADDRESS_TYPE = MyBase.Columns("ADDRESS_TYPE")
            Me.columnAddressType = MyBase.Columns("AddressType")
            Me.columnAddressUserID = MyBase.Columns("AddressUserID")
            Me.columnAddressTimestamp = MyBase.Columns("AddressTimestamp")
            Me.columnALERT = MyBase.Columns("ALERT")
            Me.columnAlertDescription = MyBase.Columns("AlertDescription")
            Me.columnCOMMENT_TEXT = MyBase.Columns("COMMENT_TEXT")
            Me.columnCommentCreatedBy = MyBase.Columns("CommentCreatedBy")
            Me.columnCommentTimestamp = MyBase.Columns("CommentTimestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPROVIDER_ID = New Global.System.Data.DataColumn("PROVIDER_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROVIDER_ID)
            Me.columnTAXID = New Global.System.Data.DataColumn("TAXID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXID)
            Me.columnTAXID_TYPE = New Global.System.Data.DataColumn("TAXID_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXID_TYPE)
            Me.columnNAME1 = New Global.System.Data.DataColumn("NAME1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME1)
            Me.columnNAME2 = New Global.System.Data.DataColumn("NAME2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME2)
            Me.columnProviderSuspended = New Global.System.Data.DataColumn("ProviderSuspended", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProviderSuspended)
            Me.columnPPOC_ELIGIBLE_SW = New Global.System.Data.DataColumn("PPOC_ELIGIBLE_SW", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPOC_ELIGIBLE_SW)
            Me.columnPARENT_ID = New Global.System.Data.DataColumn("PARENT_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARENT_ID)
            Me.columnNPI = New Global.System.Data.DataColumn("NPI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNPI)
            Me.columnCOMMENT_ID = New Global.System.Data.DataColumn("COMMENT_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT_ID)
            Me.columnProviderUserID = New Global.System.Data.DataColumn("ProviderUserID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProviderUserID)
            Me.columnProviderTimestamp = New Global.System.Data.DataColumn("ProviderTimestamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProviderTimestamp)
            Me.columnADDRESS_LINE1 = New Global.System.Data.DataColumn("ADDRESS_LINE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDRESS_LINE1)
            Me.columnADDRESS_LINE2 = New Global.System.Data.DataColumn("ADDRESS_LINE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDRESS_LINE2)
            Me.columnCITY = New Global.System.Data.DataColumn("CITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCITY)
            Me.columnCOUNTRY = New Global.System.Data.DataColumn("COUNTRY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNTRY)
            Me.columnSTATE = New Global.System.Data.DataColumn("STATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATE)
            Me.columnZIP = New Global.System.Data.DataColumn("ZIP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZIP)
            Me.columnZIP_4 = New Global.System.Data.DataColumn("ZIP_4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZIP_4)
            Me.columnPHONE1 = New Global.System.Data.DataColumn("PHONE1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHONE1)
            Me.columnEMAIL1 = New Global.System.Data.DataColumn("EMAIL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL1)
            Me.columnEXTENSION1 = New Global.System.Data.DataColumn("EXTENSION1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTENSION1)
            Me.columnCONTACT1 = New Global.System.Data.DataColumn("CONTACT1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTACT1)
            Me.columnEMAIL2 = New Global.System.Data.DataColumn("EMAIL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL2)
            Me.columnPHONE2 = New Global.System.Data.DataColumn("PHONE2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHONE2)
            Me.columnEXTENSION2 = New Global.System.Data.DataColumn("EXTENSION2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTENSION2)
            Me.columnCONTACT2 = New Global.System.Data.DataColumn("CONTACT2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTACT2)
            Me.columnAddressSuspended = New Global.System.Data.DataColumn("AddressSuspended", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressSuspended)
            Me.columnADDRESS_TYPE = New Global.System.Data.DataColumn("ADDRESS_TYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDRESS_TYPE)
            Me.columnAddressType = New Global.System.Data.DataColumn("AddressType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressType)
            Me.columnAddressUserID = New Global.System.Data.DataColumn("AddressUserID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressUserID)
            Me.columnAddressTimestamp = New Global.System.Data.DataColumn("AddressTimestamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressTimestamp)
            Me.columnALERT = New Global.System.Data.DataColumn("ALERT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALERT)
            Me.columnAlertDescription = New Global.System.Data.DataColumn("AlertDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlertDescription)
            Me.columnCOMMENT_TEXT = New Global.System.Data.DataColumn("COMMENT_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT_TEXT)
            Me.columnCommentCreatedBy = New Global.System.Data.DataColumn("CommentCreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommentCreatedBy)
            Me.columnCommentTimestamp = New Global.System.Data.DataColumn("CommentTimestamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommentTimestamp)
            Me.columnPROVIDER_ID.AllowDBNull = false
            Me.columnProviderSuspended.DefaultValue = CType(false,Boolean)
            Me.columnPPOC_ELIGIBLE_SW.DefaultValue = CType(false,Boolean)
            Me.columnAddressSuspended.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProviderAddressSummaryWithCommentsRow() As ProviderAddressSummaryWithCommentsRow
            Return CType(Me.NewRow,ProviderAddressSummaryWithCommentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProviderAddressSummaryWithCommentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProviderAddressSummaryWithCommentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProviderAddressSummaryWithCommentsRowChangedEvent) Is Nothing) Then
                RaiseEvent ProviderAddressSummaryWithCommentsRowChanged(Me, New ProviderAddressSummaryWithCommentsRowChangeEvent(CType(e.Row,ProviderAddressSummaryWithCommentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProviderAddressSummaryWithCommentsRowChangingEvent) Is Nothing) Then
                RaiseEvent ProviderAddressSummaryWithCommentsRowChanging(Me, New ProviderAddressSummaryWithCommentsRowChangeEvent(CType(e.Row,ProviderAddressSummaryWithCommentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProviderAddressSummaryWithCommentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProviderAddressSummaryWithCommentsRowDeleted(Me, New ProviderAddressSummaryWithCommentsRowChangeEvent(CType(e.Row,ProviderAddressSummaryWithCommentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProviderAddressSummaryWithCommentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProviderAddressSummaryWithCommentsRowDeleting(Me, New ProviderAddressSummaryWithCommentsRowChangeEvent(CType(e.Row,ProviderAddressSummaryWithCommentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProviderAddressSummaryWithCommentsRow(ByVal row As ProviderAddressSummaryWithCommentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProviderAddressSummaryWithComments = New ProviderAddressSummaryWithComments
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProviderAddressSummaryWithCommentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProviderAddressSummaryWithCommentsRow
        Inherits Global.System.Data.DataRow
        
        Private tableProviderAddressSummaryWithComments As ProviderAddressSummaryWithCommentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProviderAddressSummaryWithComments = CType(Me.Table,ProviderAddressSummaryWithCommentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROVIDER_ID() As Integer
            Get
                Return CType(Me(Me.tableProviderAddressSummaryWithComments.PROVIDER_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.PROVIDER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.TAXIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXID' in table 'ProviderAddressSummaryWithComments' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.TAXIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXID_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.TAXID_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXID_TYPE' in table 'ProviderAddressSummaryWithComments' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.TAXID_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAME1() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.NAME1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAME1' in table 'ProviderAddressSummaryWithComments' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.NAME1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAME2() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.NAME2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAME2' in table 'ProviderAddressSummaryWithComments' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.NAME2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProviderSuspended() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.ProviderSuspendedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProviderSuspended' in table 'ProviderAddressSummaryWithComm"& _ 
                            "ents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.ProviderSuspendedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PPOC_ELIGIBLE_SW() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.PPOC_ELIGIBLE_SWColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PPOC_ELIGIBLE_SW' in table 'ProviderAddressSummaryWithComme"& _ 
                            "nts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.PPOC_ELIGIBLE_SWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PARENT_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.PARENT_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PARENT_ID' in table 'ProviderAddressSummaryWithComments' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.PARENT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NPI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.NPIColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NPI' in table 'ProviderAddressSummaryWithComments' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.NPIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENT_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.COMMENT_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENT_ID' in table 'ProviderAddressSummaryWithComments' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.COMMENT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProviderUserID() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.ProviderUserIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProviderUserID' in table 'ProviderAddressSummaryWithComment"& _ 
                            "s' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.ProviderUserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProviderTimestamp() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.ProviderTimestampColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProviderTimestamp' in table 'ProviderAddressSummaryWithComm"& _ 
                            "ents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.ProviderTimestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDRESS_LINE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.ADDRESS_LINE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDRESS_LINE1' in table 'ProviderAddressSummaryWithComments"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.ADDRESS_LINE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDRESS_LINE2() As String
            Get
                If Me.IsADDRESS_LINE2Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.ADDRESS_LINE2Column),String)
                End If
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.ADDRESS_LINE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CITY() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.CITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CITY' in table 'ProviderAddressSummaryWithComments' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.CITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COUNTRY() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.COUNTRYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNTRY' in table 'ProviderAddressSummaryWithComments' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.COUNTRYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.STATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATE' in table 'ProviderAddressSummaryWithComments' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.STATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZIP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.ZIPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZIP' in table 'ProviderAddressSummaryWithComments' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.ZIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZIP_4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.ZIP_4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZIP_4' in table 'ProviderAddressSummaryWithComments' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.ZIP_4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHONE1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.PHONE1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHONE1' in table 'ProviderAddressSummaryWithComments' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.PHONE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMAIL1() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.EMAIL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMAIL1' in table 'ProviderAddressSummaryWithComments' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.EMAIL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXTENSION1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.EXTENSION1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTENSION1' in table 'ProviderAddressSummaryWithComments' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.EXTENSION1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CONTACT1() As String
            Get
                If Me.IsCONTACT1Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.CONTACT1Column),String)
                End If
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.CONTACT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMAIL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.EMAIL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMAIL2' in table 'ProviderAddressSummaryWithComments' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.EMAIL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHONE2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.PHONE2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHONE2' in table 'ProviderAddressSummaryWithComments' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.PHONE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXTENSION2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.EXTENSION2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTENSION2' in table 'ProviderAddressSummaryWithComments' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.EXTENSION2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CONTACT2() As String
            Get
                If Me.IsCONTACT2Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.CONTACT2Column),String)
                End If
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.CONTACT2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressSuspended() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.AddressSuspendedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddressSuspended' in table 'ProviderAddressSummaryWithComme"& _ 
                            "nts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.AddressSuspendedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDRESS_TYPE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.ADDRESS_TYPEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDRESS_TYPE' in table 'ProviderAddressSummaryWithComments'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.ADDRESS_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressType() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.AddressTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddressType' in table 'ProviderAddressSummaryWithComments' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.AddressTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressUserID() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.AddressUserIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddressUserID' in table 'ProviderAddressSummaryWithComments"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.AddressUserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressTimestamp() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.AddressTimestampColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddressTimestamp' in table 'ProviderAddressSummaryWithComme"& _ 
                            "nts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.AddressTimestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALERT() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.ALERTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ALERT' in table 'ProviderAddressSummaryWithComments' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.ALERTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AlertDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.AlertDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AlertDescription' in table 'ProviderAddressSummaryWithComme"& _ 
                            "nts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.AlertDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENT_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.COMMENT_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENT_TEXT' in table 'ProviderAddressSummaryWithComments'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.COMMENT_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CommentCreatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.CommentCreatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CommentCreatedBy' in table 'ProviderAddressSummaryWithComme"& _ 
                            "nts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.CommentCreatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CommentTimestamp() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProviderAddressSummaryWithComments.CommentTimestampColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CommentTimestamp' in table 'ProviderAddressSummaryWithComme"& _ 
                            "nts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProviderAddressSummaryWithComments.CommentTimestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXIDNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.TAXIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXIDNull()
            Me(Me.tableProviderAddressSummaryWithComments.TAXIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXID_TYPENull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.TAXID_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXID_TYPENull()
            Me(Me.tableProviderAddressSummaryWithComments.TAXID_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNAME1Null() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.NAME1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNAME1Null()
            Me(Me.tableProviderAddressSummaryWithComments.NAME1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNAME2Null() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.NAME2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNAME2Null()
            Me(Me.tableProviderAddressSummaryWithComments.NAME2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProviderSuspendedNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.ProviderSuspendedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProviderSuspendedNull()
            Me(Me.tableProviderAddressSummaryWithComments.ProviderSuspendedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPPOC_ELIGIBLE_SWNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.PPOC_ELIGIBLE_SWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPPOC_ELIGIBLE_SWNull()
            Me(Me.tableProviderAddressSummaryWithComments.PPOC_ELIGIBLE_SWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPARENT_IDNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.PARENT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPARENT_IDNull()
            Me(Me.tableProviderAddressSummaryWithComments.PARENT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNPINull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.NPIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNPINull()
            Me(Me.tableProviderAddressSummaryWithComments.NPIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENT_IDNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.COMMENT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENT_IDNull()
            Me(Me.tableProviderAddressSummaryWithComments.COMMENT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProviderUserIDNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.ProviderUserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProviderUserIDNull()
            Me(Me.tableProviderAddressSummaryWithComments.ProviderUserIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProviderTimestampNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.ProviderTimestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProviderTimestampNull()
            Me(Me.tableProviderAddressSummaryWithComments.ProviderTimestampColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDRESS_LINE1Null() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.ADDRESS_LINE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDRESS_LINE1Null()
            Me(Me.tableProviderAddressSummaryWithComments.ADDRESS_LINE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDRESS_LINE2Null() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.ADDRESS_LINE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDRESS_LINE2Null()
            Me(Me.tableProviderAddressSummaryWithComments.ADDRESS_LINE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCITYNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.CITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCITYNull()
            Me(Me.tableProviderAddressSummaryWithComments.CITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.COUNTRYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOUNTRYNull()
            Me(Me.tableProviderAddressSummaryWithComments.COUNTRYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATENull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.STATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATENull()
            Me(Me.tableProviderAddressSummaryWithComments.STATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZIPNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.ZIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZIPNull()
            Me(Me.tableProviderAddressSummaryWithComments.ZIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZIP_4Null() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.ZIP_4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZIP_4Null()
            Me(Me.tableProviderAddressSummaryWithComments.ZIP_4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHONE1Null() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.PHONE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHONE1Null()
            Me(Me.tableProviderAddressSummaryWithComments.PHONE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMAIL1Null() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.EMAIL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMAIL1Null()
            Me(Me.tableProviderAddressSummaryWithComments.EMAIL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXTENSION1Null() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.EXTENSION1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXTENSION1Null()
            Me(Me.tableProviderAddressSummaryWithComments.EXTENSION1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCONTACT1Null() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.CONTACT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCONTACT1Null()
            Me(Me.tableProviderAddressSummaryWithComments.CONTACT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMAIL2Null() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.EMAIL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMAIL2Null()
            Me(Me.tableProviderAddressSummaryWithComments.EMAIL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHONE2Null() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.PHONE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHONE2Null()
            Me(Me.tableProviderAddressSummaryWithComments.PHONE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXTENSION2Null() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.EXTENSION2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXTENSION2Null()
            Me(Me.tableProviderAddressSummaryWithComments.EXTENSION2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCONTACT2Null() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.CONTACT2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCONTACT2Null()
            Me(Me.tableProviderAddressSummaryWithComments.CONTACT2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressSuspendedNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.AddressSuspendedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressSuspendedNull()
            Me(Me.tableProviderAddressSummaryWithComments.AddressSuspendedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDRESS_TYPENull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.ADDRESS_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDRESS_TYPENull()
            Me(Me.tableProviderAddressSummaryWithComments.ADDRESS_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressTypeNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.AddressTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressTypeNull()
            Me(Me.tableProviderAddressSummaryWithComments.AddressTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressUserIDNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.AddressUserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressUserIDNull()
            Me(Me.tableProviderAddressSummaryWithComments.AddressUserIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressTimestampNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.AddressTimestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressTimestampNull()
            Me(Me.tableProviderAddressSummaryWithComments.AddressTimestampColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsALERTNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.ALERTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetALERTNull()
            Me(Me.tableProviderAddressSummaryWithComments.ALERTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAlertDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.AlertDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAlertDescriptionNull()
            Me(Me.tableProviderAddressSummaryWithComments.AlertDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENT_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.COMMENT_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENT_TEXTNull()
            Me(Me.tableProviderAddressSummaryWithComments.COMMENT_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentCreatedByNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.CommentCreatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentCreatedByNull()
            Me(Me.tableProviderAddressSummaryWithComments.CommentCreatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentTimestampNull() As Boolean
            Return Me.IsNull(Me.tableProviderAddressSummaryWithComments.CommentTimestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentTimestampNull()
            Me(Me.tableProviderAddressSummaryWithComments.CommentTimestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProviderAddressSummaryWithCommentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProviderAddressSummaryWithCommentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProviderAddressSummaryWithCommentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProviderAddressSummaryWithCommentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
