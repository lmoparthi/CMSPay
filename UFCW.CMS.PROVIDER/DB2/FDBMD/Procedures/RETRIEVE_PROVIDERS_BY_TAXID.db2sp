-- <ScriptOptions statementSeparator="@"/>
@
-- <ScriptOptions errors="off"/>
@
-- Drop the procedure if one already exists
DROP  PROCEDURE FDBMD.RETRIEVE_PROVIDERS_BY_TAXID
@
COMMIT
@
-- <ScriptOptions errors="on"/>
@
-- Create procedure
CREATE PROCEDURE FDBMD.RETRIEVE_PROVIDERS_BY_TAXID(
		IN	vPROVIDER_TAXID		INTEGER)
	RESULT SETS 1
	--LANGUAGE SQL
	COLLID FODBCOLL
	--WLM ENVIRONMENT WLMDENV4 
	STAY RESIDENT YES
	RUN OPTIONS ''
--------------------------------------------------------------------------
-- DB2 SQL procedure
--------------------------------------------------------------------------

P1: BEGIN

-- Declare variables

-- Declare cursors
DECLARE PROVIDERSUMMARY CURSOR WITH RETURN FOR 

    SELECT	PROVIDER.PROVIDER_ID,
			PROVIDER.TAXID_TYPE || CAST (CHAR(PROVIDER.TAXID) AS CHAR(9)) AS TypeAndTaxID,
			PROVIDER.TAXID,
			PROVIDER.TAXID_TYPE,
			PROVIDER.NAME1,
			PROVIDER.NAME2,
			PROVIDER.NPI,
			PROVIDER_ADDRESS.ADDRESS_LINE1 || ', ' || PROVIDER_ADDRESS.CITY || ', ' || PROVIDER_ADDRESS.STATE || ' ' || Cast(PROVIDER_ADDRESS.ZIP as char(5)) "CompositeMailAddress",
			PROVIDER.COMMENT_ID,
			PROVIDER.SUSPEND_SW "ProviderSuspended",
			PROVIDER.ONLINE_DATE AS ProviderTimestamp,
			PROVIDER.ONLINE_USERID AS ProviderUserID,
			ALERT_VALUES.DESCRIPTION
    FROM	FDBMD.PROVIDER PROVIDER LEFT OUTER JOIN 
			FDBMD.ALERT_VALUES  ALERT_VALUES		ON ALERT_VALUES.ALERT =  PROVIDER.ALERT INNER JOIN
			FDBMD.PROVIDER_ADDRESS PROVIDER_ADDRESS	ON PROVIDER.PROVIDER_ID = PROVIDER_ADDRESS.PROVIDER_ID
    WHERE	PROVIDER.TAXID = vPROVIDER_TAXID
	AND		PROVIDER_ADDRESS.ADDRESS_TYPE = 1
	AND		PROVIDER.ELECTRONIC_USE_ONLY_SW = 0
    FOR READ ONLY
    OPTIMIZE FOR 1 ROW;

--

-- Cursor left open for client application.
OPEN PROVIDERSUMMARY;


--

END P1
@
-- <ScriptOptions WLMRefresh="WLMENV4" />
@
-- Grant access privilages to procedure
GRANT EXECUTE ON PROCEDURE FDBMD.RETRIEVE_PROVIDERS_BY_TAXID TO PUBLIC
@
