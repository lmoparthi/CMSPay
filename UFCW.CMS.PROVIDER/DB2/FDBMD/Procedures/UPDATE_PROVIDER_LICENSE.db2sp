-- <ScriptOptions statementSeparator="@"/>
@
-- <ScriptOptions errors="off"/>
@
-- Drop the procedure if one already exists
DROP  PROCEDURE FDBMD.UPDATE_PROVIDER_LICENSE
@
COMMIT
@
-- <ScriptOptions errors="on"/>
@
-- Create procedure
CREATE PROCEDURE FDBMD.UPDATE_PROVIDER_LICENSE(
		IN	vLICENSE_ID				INTEGER,
		IN	vPROVIDER_ID			INTEGER,
		IN	vLICENSE				CHARACTER ( 10 ),
		IN	vLICENSE_DESCRIPTION	VARCHAR ( 50 ),
		IN	vUSERID					VARCHAR ( 40 ),
		IN	vORIGINAL_ONLINE_DATE	TIMESTAMP)
	--LANGUAGE SQL
	COLLID FODBMDFY
	--WLM ENVIRONMENT WLMDENV4 
	STAY RESIDENT YES
	RUN OPTIONS ''
--------------------------------------------------------------------------
-- DB2 SQL procedure
--------------------------------------------------------------------------

P1: BEGIN

-- Declare variables

DECLARE vDEFAULT_DATE TIMESTAMP; 

DECLARE EXIT HANDLER FOR NOT FOUND
	 SIGNAL SQLSTATE '38200'  SET MESSAGE_TEXT = 'Row Not Found, Update Failed.';

SET vDEFAULT_DATE = CURRENT TIMESTAMP;

--

UPDATE	FDBMD.PROVIDER_LICENSE PROVIDER_LICENSE
SET		PROVIDER_LICENSE.LICENSE = vLICENSE, 
		PROVIDER_LICENSE.LICENSE_DESCRIPTION = vLICENSE_DESCRIPTION, 
		PROVIDER_LICENSE.ONLINE_USERID = vUSERID, 
		PROVIDER_LICENSE.ONLINE_DATE = vDEFAULT_DATE
WHERE   (ONLINE_DATE >= vORIGINAL_ONLINE_DATE AND ONLINE_DATE < vORIGINAL_ONLINE_DATE + 1 SECONDS) 
AND		PROVIDER_LICENSE.PROVIDER_ID = vPROVIDER_ID 
AND		PROVIDER_LICENSE.LICENSE_ID = vLICENSE_ID;


--

END P1
@
-- <ScriptOptions WLMRefresh="WLMDENV4" />
@
-- Grant access privilages to procedure
GRANT EXECUTE ON PROCEDURE FDBMD.UPDATE_PROVIDER_LICENSE TO PUBLIC
@
